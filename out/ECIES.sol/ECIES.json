{"abi":[{"type":"function","name":"FIELD_MODULUS","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"GROUP_ORDER","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"calcPubKey","inputs":[{"name":"generator_","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]},{"name":"privateKey_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"decrypt","inputs":[{"name":"ciphertext_","type":"uint256","internalType":"uint256"},{"name":"ciphertextPubKey_","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]},{"name":"privateKey_","type":"uint256","internalType":"uint256"},{"name":"salt_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"message_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"deriveSymmetricKey","inputs":[{"name":"sharedSecret_","type":"uint256","internalType":"uint256"},{"name":"s1_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"encrypt","inputs":[{"name":"message_","type":"uint256","internalType":"uint256"},{"name":"recipientPubKey_","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]},{"name":"privateKey_","type":"uint256","internalType":"uint256"},{"name":"salt_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"ciphertext_","type":"uint256","internalType":"uint256"},{"name":"messagePubKey_","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"isOnBn128","inputs":[{"name":"p","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"},{"type":"function","name":"isValid","inputs":[{"name":"p","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"},{"type":"function","name":"recoverSharedSecret","inputs":[{"name":"ciphertextPubKey_","type":"tuple","internalType":"struct Point","components":[{"name":"x","type":"uint256","internalType":"uint256"},{"name":"y","type":"uint256","internalType":"uint256"}]},{"name":"privateKey_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x6107fc610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80638e692fa1116100705780638e692fa1146101155780639c1ebe591461013c578063afd238ac1461015d578063ecfcc5011461017d578063f4bca8b2146101a057600080fd5b80633a89a523146100a25780633aa98bd7146100c85780634f76a98e146100db5780635d5a714214610102575b600080fd5b6100b56100b036600461068b565b6101b3565b6040519081526020015b60405180910390f35b6100b56100d63660046106c7565b6101dc565b6100b57f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781565b6100b56101103660046106e9565b61020b565b6100b57f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b61014f61014a36600461068b565b6102e3565b6040516100bf929190610714565b61017061016b3660046106e9565b61034f565b6040516100bf9190610732565b61019061018b366004610749565b61043a565b60405190151581526020016100bf565b6101906101ae366004610749565b610473565b6000806101c0858561020b565b905060006101ce82856101dc565b969096189695505050505050565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b60006102168361043a565b61025d5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b210383ab13634b19035b2bc9760691b60448201526064015b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018210158061028a575081155b156102ce5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b210383934bb30ba329035b2bc9760611b6044820152606401610254565b60006102da84846104bb565b51949350505050565b6000610302604051806040016040528060008152602001600081525090565b61032260405180604001604052806001815260200160028152508561034f565b90506000610330868661020b565b9050600061033e82866101dc565b979097189791965090945050505050565b604080518082019091526000808252602082015261036c8361043a565b6103b85760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642067656e657261746f7220706f696e742e00000000000000006044820152606401610254565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001821015806103e5575081155b156104295760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b210383934bb30ba329035b2bc9760611b6044820152606401610254565b61043383836104bb565b9392505050565b805160009061045d906104569061045181806105ca565b6105ca565b60036105f7565b602083015161046c90806105ca565b1492915050565b600061047e8261043a565b801561049c57508151600114801561049a575081602001516002145b155b8015610205575081511580156104b457506020820151155b1592915050565b6040805180820190915260008082526020820152825160208085015160405160009384936007936117709361050493928a91019283526020830191909152604082015260600190565b60408051601f198184030181529082905261051e91610765565b6000604051808303818686fa925050503d806000811461055a576040519150601f19603f3d011682016040523d82523d6000602084013e61055f565b606091505b509150915081158061057057508051155b156105ad5760405162461bcd60e51b815260206004820152600d60248201526c32b1a6bab6103330b4b632b21760991b6044820152606401610254565b808060200190518101906105c19190610794565b95945050505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478284099392505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478284089392505050565b6040805190810167ffffffffffffffff8111828210171561065557634e487b7160e01b600052604160045260246000fd5b60405290565b60006040828403121561066d57600080fd5b610675610624565b9050813581526020820135602082015292915050565b60008060008060a085870312156106a157600080fd5b843593506106b2866020870161065b565b93969395505050506060820135916080013590565b600080604083850312156106da57600080fd5b50508035926020909101359150565b600080606083850312156106fc57600080fd5b610706848461065b565b946040939093013593505050565b82815260608101610433602083018480518252602090810151910152565b815181526020808301519082015260408101610205565b60006040828403121561075b57600080fd5b610433838361065b565b6000825160005b81811015610786576020818601810151858301520161076c565b506000920191825250919050565b6000604082840312156107a657600080fd5b6107ae610624565b8251815260208301516020820152809150509291505056fea26469706673582212209b362313902f0449abb5dfc9b88f803b1598c6f9dfa46f74d8f49dabbcf8449964736f6c63430008190033","sourceMap":"1670:6632:71:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1670:6632:71;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80638e692fa1116100705780638e692fa1146101155780639c1ebe591461013c578063afd238ac1461015d578063ecfcc5011461017d578063f4bca8b2146101a057600080fd5b80633a89a523146100a25780633aa98bd7146100c85780634f76a98e146100db5780635d5a714214610102575b600080fd5b6100b56100b036600461068b565b6101b3565b6040519081526020015b60405180910390f35b6100b56100d63660046106c7565b6101dc565b6100b57f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781565b6100b56101103660046106e9565b61020b565b6100b57f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b61014f61014a36600461068b565b6102e3565b6040516100bf929190610714565b61017061016b3660046106e9565b61034f565b6040516100bf9190610732565b61019061018b366004610749565b61043a565b60405190151581526020016100bf565b6101906101ae366004610749565b610473565b6000806101c0858561020b565b905060006101ce82856101dc565b969096189695505050505050565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b60006102168361043a565b61025d5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b210383ab13634b19035b2bc9760691b60448201526064015b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018210158061028a575081155b156102ce5760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b210383934bb30ba329035b2bc9760611b6044820152606401610254565b60006102da84846104bb565b51949350505050565b6000610302604051806040016040528060008152602001600081525090565b61032260405180604001604052806001815260200160028152508561034f565b90506000610330868661020b565b9050600061033e82866101dc565b979097189791965090945050505050565b604080518082019091526000808252602082015261036c8361043a565b6103b85760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642067656e657261746f7220706f696e742e00000000000000006044820152606401610254565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001821015806103e5575081155b156104295760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b210383934bb30ba329035b2bc9760611b6044820152606401610254565b61043383836104bb565b9392505050565b805160009061045d906104569061045181806105ca565b6105ca565b60036105f7565b602083015161046c90806105ca565b1492915050565b600061047e8261043a565b801561049c57508151600114801561049a575081602001516002145b155b8015610205575081511580156104b457506020820151155b1592915050565b6040805180820190915260008082526020820152825160208085015160405160009384936007936117709361050493928a91019283526020830191909152604082015260600190565b60408051601f198184030181529082905261051e91610765565b6000604051808303818686fa925050503d806000811461055a576040519150601f19603f3d011682016040523d82523d6000602084013e61055f565b606091505b509150915081158061057057508051155b156105ad5760405162461bcd60e51b815260206004820152600d60248201526c32b1a6bab6103330b4b632b21760991b6044820152606401610254565b808060200190518101906105c19190610794565b95945050505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478284099392505050565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478284089392505050565b6040805190810167ffffffffffffffff8111828210171561065557634e487b7160e01b600052604160045260246000fd5b60405290565b60006040828403121561066d57600080fd5b610675610624565b9050813581526020820135602082015292915050565b60008060008060a085870312156106a157600080fd5b843593506106b2866020870161065b565b93969395505050506060820135916080013590565b600080604083850312156106da57600080fd5b50508035926020909101359150565b600080606083850312156106fc57600080fd5b610706848461065b565b946040939093013593505050565b82815260608101610433602083018480518252602090810151910152565b815181526020808301519082015260408101610205565b60006040828403121561075b57600080fd5b610433838361065b565b6000825160005b81811015610786576020818601810151858301520161076c565b506000920191825250919050565b6000604082840312156107a657600080fd5b6107ae610624565b8251815260208301516020820152809150509291505056fea26469706673582212209b362313902f0449abb5dfc9b88f803b1598c6f9dfa46f74d8f49dabbcf8449964736f6c63430008190033","sourceMap":"1670:6632:71:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3956:650;;;;;;:::i;:::-;;:::i;:::-;;;1237:25:81;;;1225:2;1210:18;3956:650:71;;;;;;;;2415:174;;;;;;:::i;:::-;;:::i;1844:150::-;;1892:102;1844:150;;2754:516;;;;;;:::i;:::-;;:::i;1690:148::-;;1736:102;1690:148;;5313:829;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;6454:464::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7402:269::-;;;;;;:::i;:::-;;:::i;:::-;;;2957:14:81;;2950:22;2932:41;;2920:2;2905:18;7402:269:71;2784:195:81;7828:150:71;;;;;;:::i;:::-;;:::i;3956:650::-;4121:16;4280:20;4303:51;4323:17;4342:11;4303:19;:51::i;:::-;4280:74;;4437:20;4460:39;4479:12;4493:5;4460:18;:39::i;:::-;4573:26;;;;;3956:650;-1:-1:-1;;;;;;3956:650:71:o;2415:174::-;2544:36;;;;;;;3141:19:81;;;3176:12;;;3169:28;;;2544:36:71;;;;;;;;;3213:12:81;;;;2544:36:71;;;2534:47;;;;;2415:174;;;;;:::o;2754:516::-;2879:7;2950:28;2960:17;2950:9;:28::i;:::-;2945:64;;2980:29;;-1:-1:-1;;;2980:29:71;;3438:2:81;2980:29:71;;;3420:21:81;3477:2;3457:18;;;3450:30;-1:-1:-1;;;3496:18:81;;;3489:49;3555:18;;2980:29:71;;;;;;;;2945:64;1736:102;3098:11;:26;;:46;;;-1:-1:-1;3128:16:71;;3098:46;3094:82;;;3146:30;;-1:-1:-1;;;3146:30:71;;3786:2:81;3146:30:71;;;3768:21:81;3825:2;3805:18;;;3798:30;-1:-1:-1;;;3844:18:81;;;3837:50;3904:18;;3146:30:71;3584:344:81;3094:82:71;3187:14;3204:38;3211:17;3230:11;3204:6;:38::i;:::-;3260:3;;2754:516;-1:-1:-1;;;;2754:516:71:o;5313:829::-;5474:19;5495:27;-1:-1:-1;;;;;;;;;;;;;;;;;;;5495:27:71;5669:36;5680:11;;;;;;;;5686:1;5680:11;;;;5689:1;5680:11;;;5693;5669:10;:36::i;:::-;5652:53;;5817:20;5840:50;5860:16;5878:11;5840:19;:50::i;:::-;5817:73;;5973:20;5996:39;6015:12;6029:5;5996:18;:39::i;:::-;6112:23;;;;;5313:829;;-1:-1:-1;5313:829:71;;-1:-1:-1;;;;;5313:829:71:o;6454:464::-;-1:-1:-1;;;;;;;;;;;;;;;;;6638:21:71;6648:10;6638:9;:21::i;:::-;6633:62;;6661:34;;-1:-1:-1;;;6661:34:71;;4135:2:81;6661:34:71;;;4117:21:81;4174:2;4154:18;;;4147:30;4213:26;4193:18;;;4186:54;4257:18;;6661:34:71;3933:348:81;6633:62:71;1736:102;6784:11;:26;;:46;;;-1:-1:-1;6814:16:71;;6784:46;6780:82;;;6832:30;;-1:-1:-1;;;6832:30:71;;3786:2:81;6832:30:71;;;3768:21:81;3825:2;3805:18;;;3798:30;-1:-1:-1;;;3844:18:81;;;3837:50;3904:18;;6832:30:71;3584:344:81;6780:82:71;6880:31;6887:10;6899:11;6880:6;:31::i;:::-;6873:38;6454:464;-1:-1:-1;;;6454:464:71:o;7402:269::-;7635:3;;7458:4;;7615:49;;7625:35;;7640:19;7635:3;;7640:9;:19::i;:::-;7625:9;:35::i;:::-;7662:1;7615:9;:49::i;:::-;7602:3;;;;7592:19;;7602:3;7592:9;:19::i;:::-;:72;;7402:269;-1:-1:-1;;7402:269:71:o;7828:150::-;7882:4;7905:12;7915:1;7905:9;:12::i;:::-;:39;;;;-1:-1:-1;7923:3:71;;7930:1;7923:8;:20;;;;;7935:1;:3;;;7942:1;7935:8;7923:20;7921:23;7905:39;:66;;;;-1:-1:-1;7950:3:71;;:8;:20;;;;-1:-1:-1;7962:3:71;;;;:8;7950:20;7948:23;7898:73;7828:150;-1:-1:-1;;7828:150:71:o;6924:332::-;-1:-1:-1;;;;;;;;;;;;;;;;;7118:3:71;;7123;;;;;7107:28;;7022:12;;;;7079:4;;7101;;7107:28;;7118:3;7128:6;;7107:28;4488:25:81;;;4544:2;4529:18;;4522:34;;;;4587:2;4572:18;;4565:34;4476:2;4461:18;;4286:319;7107:28:71;;;;-1:-1:-1;;7107:28:71;;;;;;;;;;7071:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7021:115;;;;7152:7;7151:8;:30;;;-1:-1:-1;7163:13:71;;:18;7151:30;7147:59;;;7183:23;;-1:-1:-1;;;7183:23:71;;5229:2:81;7183:23:71;;;5211:21:81;5268:2;5248:18;;;5241:30;-1:-1:-1;;;5287:18:81;;;5280:43;5340:18;;7183:23:71;5027:337:81;7147:59:71;7233:6;7222:27;;;;;;;;;;;;:::i;:::-;7217:32;6924:332;-1:-1:-1;;;;;6924:332:71:o;7984:155::-;8047:9;8109:13;8106:1;8103;8096:27;8091:32;7984:155;-1:-1:-1;;;7984:155:71:o;8145:::-;8208:9;8270:13;8267:1;8264;8257:27;8252:32;8145:155;-1:-1:-1;;;8145:155:71:o;14:349:81:-;81:4;75:11;;;113:17;;160:18;145:34;;181:22;;;142:62;139:185;;;246:10;241:3;237:20;234:1;227:31;281:4;278:1;271:15;309:4;306:1;299:15;139:185;340:4;333:24;14:349;:::o;368:275::-;420:5;468:4;456:9;451:3;447:19;443:30;440:50;;;486:1;483;476:12;440:50;508:17;;:::i;:::-;499:26;;561:9;548:23;541:5;534:38;632:2;621:9;617:18;604:32;599:2;592:5;588:14;581:56;368:275;;;;:::o;648:430::-;758:6;766;774;782;835:3;823:9;814:7;810:23;806:33;803:53;;;852:1;849;842:12;803:53;888:9;875:23;865:33;;917:52;961:7;956:2;945:9;941:18;917:52;:::i;:::-;648:430;;907:62;;-1:-1:-1;;;;1016:2:81;1001:18;;988:32;;1067:3;1052:19;1039:33;;648:430::o;1273:248::-;1341:6;1349;1402:2;1390:9;1381:7;1377:23;1373:32;1370:52;;;1418:1;1415;1408:12;1370:52;-1:-1:-1;;1441:23:81;;;1511:2;1496:18;;;1483:32;;-1:-1:-1;1273:248:81:o;1526:292::-;1618:6;1626;1679:2;1667:9;1658:7;1654:23;1650:32;1647:52;;;1695:1;1692;1685:12;1647:52;1718:43;1753:7;1742:9;1718:43;:::i;:::-;1708:53;1808:2;1793:18;;;;1780:32;;-1:-1:-1;;;1526:292:81:o;1974:321::-;2204:25;;;2192:2;2177:18;;2238:51;2285:2;2270:18;;2262:6;1894:12;;1882:25;;1956:4;1945:16;;;1939:23;1923:14;;1916:47;1823:146;2300:250;1894:12;;1882:25;;1956:4;1945:16;;;1939:23;1923:14;;;1916:47;2490:2;2475:18;;2502:42;1823:146;2555:224;2638:6;2691:2;2679:9;2670:7;2666:23;2662:32;2659:52;;;2707:1;2704;2697:12;2659:52;2730:43;2765:7;2754:9;2730:43;:::i;4610:412::-;4739:3;4777:6;4771:13;4802:1;4812:129;4826:6;4823:1;4820:13;4812:129;;;4924:4;4908:14;;;4904:25;;4898:32;4885:11;;;4878:53;4841:12;4812:129;;;-1:-1:-1;4996:1:81;4960:16;;4985:13;;;-1:-1:-1;4960:16:81;4610:412;-1:-1:-1;4610:412:81:o;5369:334::-;5463:6;5516:2;5504:9;5495:7;5491:23;5487:32;5484:52;;;5532:1;5529;5522:12;5484:52;5558:17;;:::i;:::-;5604:9;5598:16;5591:5;5584:31;5668:2;5657:9;5653:18;5647:25;5642:2;5635:5;5631:14;5624:49;5692:5;5682:15;;;5369:334;;;;:::o","linkReferences":{}},"methodIdentifiers":{"FIELD_MODULUS()":"4f76a98e","GROUP_ORDER()":"8e692fa1","calcPubKey(Point,uint256)":"afd238ac","decrypt(uint256,Point,uint256,uint256)":"3a89a523","deriveSymmetricKey(uint256,uint256)":"3aa98bd7","encrypt(uint256,Point,uint256,uint256)":"9c1ebe59","isOnBn128(Point)":"ecfcc501","isValid(Point)":"f4bca8b2","recoverSharedSecret(Point,uint256)":"5d5a7142"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FIELD_MODULUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GROUP_ORDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"generator_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"privateKey_\",\"type\":\"uint256\"}],\"name\":\"calcPubKey\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"ciphertextPubKey_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"privateKey_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt_\",\"type\":\"uint256\"}],\"name\":\"decrypt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharedSecret_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s1_\",\"type\":\"uint256\"}],\"name\":\"deriveSymmetricKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"recipientPubKey_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"privateKey_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt_\",\"type\":\"uint256\"}],\"name\":\"encrypt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ciphertext_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"messagePubKey_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"isOnBn128\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Point\",\"name\":\"ciphertextPubKey_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"privateKey_\",\"type\":\"uint256\"}],\"name\":\"recoverSharedSecret\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Oighty\",\"details\":\"The alt_bn128 curve is used since there are precompiled contracts for point addition, calar multiplication, and pairing that make it gas efficient.         XOR encryption is used with the derived symmetric key, which is not as secure as modern encryption algorithms, but is simple and cheap to implement.         We use keccak256 as the key derivation function, which, as a hash-based key derivation function, is susceptible to dictionary attacks, but is sufficient for our purposes.         As a result of the relative weakness of the symmetric encryption and key derivation function, we rely on the security of the elliptic curve to hide the shared secret.         Recent advances in attacks on the alt_bn128 curve have reduced the expected security of the curve to ~98 bits.         Therefore, this implementation should not be used to secure value directly. It can be used to secure data which, if compromised, would not be catastrophic.         Inspired by:         - https://cryptobook.nakov.com/asymmetric-key-ciphers/ecies-public-key-encryption         - https://billatnapier.medium.com/how-do-i-implement-symmetric-key-encryption-in-ethereum-14afffff6e42         - https://github.com/PhilippSchindler/EthDKG/blob/master/contracts/ETHDKG.sol         This library assumes the curve used is y^2 = x^3 + 3, which has generator point (1, 2).\",\"kind\":\"dev\",\"methods\":{\"calcPubKey(Point,uint256)\":{\"params\":{\"generator_\":\"- The point on the the alt_bn128 curve. to use as the generator.\",\"privateKey_\":\"- The private key to calculate the public key for.\"}},\"decrypt(uint256,Point,uint256,uint256)\":{\"details\":\"We use XOR encryption. The security of the algorithm relies on the security of the elliptic curve to hide the shared secret.\",\"params\":{\"ciphertextPubKey_\":\"- The ciphertext public key provided by the sender.\",\"ciphertext_\":\"- The encrypted message.\",\"privateKey_\":\"- The private key of the recipient.\",\"salt_\":\"- A salt used to derive the symmetric key from the shared secret. Ensures that the symmetric key is unique even if the shared secret is reused.\"},\"returns\":{\"message_\":\"- The decrypted message.\"}},\"deriveSymmetricKey(uint256,uint256)\":{\"details\":\"This is not as secure as modern key derivation functions, since hash-based keys are susceptible to dictionary attacks.      However, it is simple and cheap to implement, and is sufficient for our purposes.      The salt prevents duplication even if a shared secret is reused.\"},\"encrypt(uint256,Point,uint256,uint256)\":{\"params\":{\"message_\":\"- The message to encrypt.\",\"privateKey_\":\"- The private key to use to encrypt the message.\",\"recipientPubKey_\":\"- The public key of the recipient.\",\"salt_\":\"- A salt used to derive the symmetric key from the shared secret. Ensures that the symmetric key is unique even if the shared secret is reused.\"},\"returns\":{\"ciphertext_\":\"- The encrypted message.\",\"messagePubKey_\":\"- The public key of the message that the receipient can use to decrypt it.\"}},\"isOnBn128(Point)\":{\"params\":{\"p\":\"- The point to check (consists of x and y coordinates).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcPubKey(Point,uint256)\":{\"notice\":\"Calculate the point on the generator curve that corresponds to the provided private key. This is used as the public key.\"},\"decrypt(uint256,Point,uint256,uint256)\":{\"notice\":\"Decrypt a message using the provided ciphertext, ciphertext public key, and private key from the recipient.\"},\"deriveSymmetricKey(uint256,uint256)\":{\"notice\":\"We use a hash function to derive a symmetric key from the shared secret and a provided salt.\"},\"encrypt(uint256,Point,uint256,uint256)\":{\"notice\":\"Encrypt a message using the provided recipient public key and the sender private key. Note: sending the private key to an RPC can leak it. This should be used locally.\"},\"isOnBn128(Point)\":{\"notice\":\"Checks whether a point is on the alt_bn128 curve.\"},\"isValid(Point)\":{\"notice\":\"Checks whether a point is valid. We consider a point valid if it is on the curve and not the generator point or the point at infinity.\"},\"recoverSharedSecret(Point,uint256)\":{\"notice\":\"Recover the shared secret as the x-coordinate of the EC point computed as the multiplication of the ciphertext public key and the private key.\"}},\"notice\":\"This library implements a simplified version of the Elliptic Curve Integrated Encryption Scheme (ECIES) using the alt_bn128 curve.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/ECIES.sol\":\"ECIES\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/lib/ECIES.sol\":{\"keccak256\":\"0xb21c288b783561e3c9b6f61a9fb407cdfc77e83d3f0c9257017077b28277dc74\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://c94d575b5b6a41c712af4e58be5bef002817842d020d6803c88be56057843e3f\",\"dweb:/ipfs/QmeW1EDcQFSvYcv4RkwX4YKDgNTJuSpoBZVW9x8ZHrG4Lh\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"FIELD_MODULUS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"GROUP_ORDER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct Point","name":"generator_","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]},{"internalType":"uint256","name":"privateKey_","type":"uint256"}],"stateMutability":"view","type":"function","name":"calcPubKey","outputs":[{"internalType":"struct Point","name":"","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]}]},{"inputs":[{"internalType":"uint256","name":"ciphertext_","type":"uint256"},{"internalType":"struct Point","name":"ciphertextPubKey_","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]},{"internalType":"uint256","name":"privateKey_","type":"uint256"},{"internalType":"uint256","name":"salt_","type":"uint256"}],"stateMutability":"view","type":"function","name":"decrypt","outputs":[{"internalType":"uint256","name":"message_","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"sharedSecret_","type":"uint256"},{"internalType":"uint256","name":"s1_","type":"uint256"}],"stateMutability":"pure","type":"function","name":"deriveSymmetricKey","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"message_","type":"uint256"},{"internalType":"struct Point","name":"recipientPubKey_","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]},{"internalType":"uint256","name":"privateKey_","type":"uint256"},{"internalType":"uint256","name":"salt_","type":"uint256"}],"stateMutability":"view","type":"function","name":"encrypt","outputs":[{"internalType":"uint256","name":"ciphertext_","type":"uint256"},{"internalType":"struct Point","name":"messagePubKey_","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]}]},{"inputs":[{"internalType":"struct Point","name":"p","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]}],"stateMutability":"pure","type":"function","name":"isOnBn128","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct Point","name":"p","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]}],"stateMutability":"pure","type":"function","name":"isValid","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct Point","name":"ciphertextPubKey_","type":"tuple","components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}]},{"internalType":"uint256","name":"privateKey_","type":"uint256"}],"stateMutability":"view","type":"function","name":"recoverSharedSecret","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"calcPubKey(Point,uint256)":{"params":{"generator_":"- The point on the the alt_bn128 curve. to use as the generator.","privateKey_":"- The private key to calculate the public key for."}},"decrypt(uint256,Point,uint256,uint256)":{"details":"We use XOR encryption. The security of the algorithm relies on the security of the elliptic curve to hide the shared secret.","params":{"ciphertextPubKey_":"- The ciphertext public key provided by the sender.","ciphertext_":"- The encrypted message.","privateKey_":"- The private key of the recipient.","salt_":"- A salt used to derive the symmetric key from the shared secret. Ensures that the symmetric key is unique even if the shared secret is reused."},"returns":{"message_":"- The decrypted message."}},"deriveSymmetricKey(uint256,uint256)":{"details":"This is not as secure as modern key derivation functions, since hash-based keys are susceptible to dictionary attacks.      However, it is simple and cheap to implement, and is sufficient for our purposes.      The salt prevents duplication even if a shared secret is reused."},"encrypt(uint256,Point,uint256,uint256)":{"params":{"message_":"- The message to encrypt.","privateKey_":"- The private key to use to encrypt the message.","recipientPubKey_":"- The public key of the recipient.","salt_":"- A salt used to derive the symmetric key from the shared secret. Ensures that the symmetric key is unique even if the shared secret is reused."},"returns":{"ciphertext_":"- The encrypted message.","messagePubKey_":"- The public key of the message that the receipient can use to decrypt it."}},"isOnBn128(Point)":{"params":{"p":"- The point to check (consists of x and y coordinates)."}}},"version":1},"userdoc":{"kind":"user","methods":{"calcPubKey(Point,uint256)":{"notice":"Calculate the point on the generator curve that corresponds to the provided private key. This is used as the public key."},"decrypt(uint256,Point,uint256,uint256)":{"notice":"Decrypt a message using the provided ciphertext, ciphertext public key, and private key from the recipient."},"deriveSymmetricKey(uint256,uint256)":{"notice":"We use a hash function to derive a symmetric key from the shared secret and a provided salt."},"encrypt(uint256,Point,uint256,uint256)":{"notice":"Encrypt a message using the provided recipient public key and the sender private key. Note: sending the private key to an RPC can leak it. This should be used locally."},"isOnBn128(Point)":{"notice":"Checks whether a point is on the alt_bn128 curve."},"isValid(Point)":{"notice":"Checks whether a point is valid. We consider a point valid if it is on the curve and not the generator point or the point at infinity."},"recoverSharedSecret(Point,uint256)":{"notice":"Recover the shared secret as the x-coordinate of the EC point computed as the multiplication of the ciphertext public key and the private key."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/ECIES.sol":"ECIES"},"evmVersion":"paris","libraries":{}},"sources":{"src/lib/ECIES.sol":{"keccak256":"0xb21c288b783561e3c9b6f61a9fb407cdfc77e83d3f0c9257017077b28277dc74","urls":["bzz-raw://c94d575b5b6a41c712af4e58be5bef002817842d020d6803c88be56057843e3f","dweb:/ipfs/QmeW1EDcQFSvYcv4RkwX4YKDgNTJuSpoBZVW9x8ZHrG4Lh"],"license":"AGPL-3.0"}},"version":1},"id":71}