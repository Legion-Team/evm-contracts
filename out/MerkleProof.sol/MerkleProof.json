{"abi":[{"type":"error","name":"MerkleProofInvalidMultiproof","inputs":[]}],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075acde5660f84cd3529c1fa50a42c365b92a55fa6bf47ca8563cd2547ed17e8364736f6c63430008190033","sourceMap":"1231:22978:46:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1231:22978:46;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075acde5660f84cd3529c1fa50a42c365b92a55fa6bf47ca8563cd2547ed17e8364736f6c63430008190033","sourceMap":"1231:22978:46:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x89c4d3509df3e1387752bf07f04bdf967ddb424d8917808bc9e6e4bc7995db0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2909c1aa5cc0ef4288e88c361fc114838aeb2c9396f83886ab9c52b39baf602f\",\"dweb:/ipfs/QmS246CQ6JN1dH3khhZvURLFEgfJ1DiV7J1VYxisfqLVnm\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x5df0a11a50b9a4087f6b20926d1ba4cde36a098a57e617f995340ec58caf91da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29a30e7d76fa2b744b952dd41a355bf102b5b549c2fe141871279c5401385cb2\",\"dweb:/ipfs/QmbgrMgGk2qZUYjzC6oUUjhskDzREgSAYxv1uVSZTu4BAT\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"MerkleProofInvalidMultiproof"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol":"MerkleProof"},"evmVersion":"paris","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol":{"keccak256":"0x89c4d3509df3e1387752bf07f04bdf967ddb424d8917808bc9e6e4bc7995db0e","urls":["bzz-raw://2909c1aa5cc0ef4288e88c361fc114838aeb2c9396f83886ab9c52b39baf602f","dweb:/ipfs/QmS246CQ6JN1dH3khhZvURLFEgfJ1DiV7J1VYxisfqLVnm"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol":{"keccak256":"0x5df0a11a50b9a4087f6b20926d1ba4cde36a098a57e617f995340ec58caf91da","urls":["bzz-raw://29a30e7d76fa2b744b952dd41a355bf102b5b549c2fe141871279c5401385cb2","dweb:/ipfs/QmbgrMgGk2qZUYjzC6oUUjhskDzREgSAYxv1uVSZTu4BAT"],"license":"MIT"}},"version":1},"id":46}